// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: program.proto

#ifndef PROTOBUF_program_2eproto__INCLUDED
#define PROTOBUF_program_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rhsa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_program_2eproto();
void protobuf_AssignDesc_program_2eproto();
void protobuf_ShutdownFile_program_2eproto();

class CreateExecutable;
class ProgramMesg;

enum CreateExecutable_Profile {
  CreateExecutable_Profile_HSA_PROFILE_BASE = 0,
  CreateExecutable_Profile_HSA_PROFILE_FULL = 1
};
bool CreateExecutable_Profile_IsValid(int value);
const CreateExecutable_Profile CreateExecutable_Profile_Profile_MIN = CreateExecutable_Profile_HSA_PROFILE_BASE;
const CreateExecutable_Profile CreateExecutable_Profile_Profile_MAX = CreateExecutable_Profile_HSA_PROFILE_FULL;
const int CreateExecutable_Profile_Profile_ARRAYSIZE = CreateExecutable_Profile_Profile_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateExecutable_Profile_descriptor();
inline const ::std::string& CreateExecutable_Profile_Name(CreateExecutable_Profile value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateExecutable_Profile_descriptor(), value);
}
inline bool CreateExecutable_Profile_Parse(
    const ::std::string& name, CreateExecutable_Profile* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateExecutable_Profile>(
    CreateExecutable_Profile_descriptor(), name, value);
}
enum CreateExecutable_ExecutableState {
  CreateExecutable_ExecutableState_HSA_EXECUTABLE_STATE_UNFROZEN = 0,
  CreateExecutable_ExecutableState_HSA_EXECUTABLE_STATE_FROZEN = 1
};
bool CreateExecutable_ExecutableState_IsValid(int value);
const CreateExecutable_ExecutableState CreateExecutable_ExecutableState_ExecutableState_MIN = CreateExecutable_ExecutableState_HSA_EXECUTABLE_STATE_UNFROZEN;
const CreateExecutable_ExecutableState CreateExecutable_ExecutableState_ExecutableState_MAX = CreateExecutable_ExecutableState_HSA_EXECUTABLE_STATE_FROZEN;
const int CreateExecutable_ExecutableState_ExecutableState_ARRAYSIZE = CreateExecutable_ExecutableState_ExecutableState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateExecutable_ExecutableState_descriptor();
inline const ::std::string& CreateExecutable_ExecutableState_Name(CreateExecutable_ExecutableState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateExecutable_ExecutableState_descriptor(), value);
}
inline bool CreateExecutable_ExecutableState_Parse(
    const ::std::string& name, CreateExecutable_ExecutableState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateExecutable_ExecutableState>(
    CreateExecutable_ExecutableState_descriptor(), name, value);
}
// ===================================================================

class CreateExecutable : public ::google::protobuf::Message {
 public:
  CreateExecutable();
  virtual ~CreateExecutable();

  CreateExecutable(const CreateExecutable& from);

  inline CreateExecutable& operator=(const CreateExecutable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateExecutable& default_instance();

  void Swap(CreateExecutable* other);

  // implements Message ----------------------------------------------

  CreateExecutable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateExecutable& from);
  void MergeFrom(const CreateExecutable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CreateExecutable_Profile Profile;
  static const Profile HSA_PROFILE_BASE = CreateExecutable_Profile_HSA_PROFILE_BASE;
  static const Profile HSA_PROFILE_FULL = CreateExecutable_Profile_HSA_PROFILE_FULL;
  static inline bool Profile_IsValid(int value) {
    return CreateExecutable_Profile_IsValid(value);
  }
  static const Profile Profile_MIN =
    CreateExecutable_Profile_Profile_MIN;
  static const Profile Profile_MAX =
    CreateExecutable_Profile_Profile_MAX;
  static const int Profile_ARRAYSIZE =
    CreateExecutable_Profile_Profile_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Profile_descriptor() {
    return CreateExecutable_Profile_descriptor();
  }
  static inline const ::std::string& Profile_Name(Profile value) {
    return CreateExecutable_Profile_Name(value);
  }
  static inline bool Profile_Parse(const ::std::string& name,
      Profile* value) {
    return CreateExecutable_Profile_Parse(name, value);
  }

  typedef CreateExecutable_ExecutableState ExecutableState;
  static const ExecutableState HSA_EXECUTABLE_STATE_UNFROZEN = CreateExecutable_ExecutableState_HSA_EXECUTABLE_STATE_UNFROZEN;
  static const ExecutableState HSA_EXECUTABLE_STATE_FROZEN = CreateExecutable_ExecutableState_HSA_EXECUTABLE_STATE_FROZEN;
  static inline bool ExecutableState_IsValid(int value) {
    return CreateExecutable_ExecutableState_IsValid(value);
  }
  static const ExecutableState ExecutableState_MIN =
    CreateExecutable_ExecutableState_ExecutableState_MIN;
  static const ExecutableState ExecutableState_MAX =
    CreateExecutable_ExecutableState_ExecutableState_MAX;
  static const int ExecutableState_ARRAYSIZE =
    CreateExecutable_ExecutableState_ExecutableState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecutableState_descriptor() {
    return CreateExecutable_ExecutableState_descriptor();
  }
  static inline const ::std::string& ExecutableState_Name(ExecutableState value) {
    return CreateExecutable_ExecutableState_Name(value);
  }
  static inline bool ExecutableState_Parse(const ::std::string& name,
      ExecutableState* value) {
    return CreateExecutable_ExecutableState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .rhsa.CreateExecutable.Profile profile = 100;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 100;
  inline ::rhsa::CreateExecutable_Profile profile() const;
  inline void set_profile(::rhsa::CreateExecutable_Profile value);

  // required .rhsa.CreateExecutable.ExecutableState executableState = 101;
  inline bool has_executablestate() const;
  inline void clear_executablestate();
  static const int kExecutableStateFieldNumber = 101;
  inline ::rhsa::CreateExecutable_ExecutableState executablestate() const;
  inline void set_executablestate(::rhsa::CreateExecutable_ExecutableState value);

  // required string options = 102;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 102;
  inline const ::std::string& options() const;
  inline void set_options(const ::std::string& value);
  inline void set_options(const char* value);
  inline void set_options(const char* value, size_t size);
  inline ::std::string* mutable_options();
  inline ::std::string* release_options();
  inline void set_allocated_options(::std::string* options);

  // @@protoc_insertion_point(class_scope:rhsa.CreateExecutable)
 private:
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_executablestate();
  inline void clear_has_executablestate();
  inline void set_has_options();
  inline void clear_has_options();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int profile_;
  int executablestate_;
  ::std::string* options_;
  friend void  protobuf_AddDesc_program_2eproto();
  friend void protobuf_AssignDesc_program_2eproto();
  friend void protobuf_ShutdownFile_program_2eproto();

  void InitAsDefaultInstance();
  static CreateExecutable* default_instance_;
};
// -------------------------------------------------------------------

class ProgramMesg : public ::google::protobuf::Message {
 public:
  ProgramMesg();
  virtual ~ProgramMesg();

  ProgramMesg(const ProgramMesg& from);

  inline ProgramMesg& operator=(const ProgramMesg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgramMesg& default_instance();

  enum PayloadCase {
    kCreateExecutable = 1000,
    PAYLOAD_NOT_SET = 0,
  };

  void Swap(ProgramMesg* other);

  // implements Message ----------------------------------------------

  ProgramMesg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProgramMesg& from);
  void MergeFrom(const ProgramMesg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rhsa.CreateExecutable createExecutable = 1000;
  inline bool has_createexecutable() const;
  inline void clear_createexecutable();
  static const int kCreateExecutableFieldNumber = 1000;
  inline const ::rhsa::CreateExecutable& createexecutable() const;
  inline ::rhsa::CreateExecutable* mutable_createexecutable();
  inline ::rhsa::CreateExecutable* release_createexecutable();
  inline void set_allocated_createexecutable(::rhsa::CreateExecutable* createexecutable);

  inline PayloadCase Payload_case() const;
  // @@protoc_insertion_point(class_scope:rhsa.ProgramMesg)
 private:
  inline void set_has_createexecutable();

  inline bool has_Payload();
  void clear_Payload();
  inline void clear_has_Payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union PayloadUnion {
    ::rhsa::CreateExecutable* createexecutable_;
  } Payload_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_program_2eproto();
  friend void protobuf_AssignDesc_program_2eproto();
  friend void protobuf_ShutdownFile_program_2eproto();

  void InitAsDefaultInstance();
  static ProgramMesg* default_instance_;
};
// ===================================================================


// ===================================================================

// CreateExecutable

// required .rhsa.CreateExecutable.Profile profile = 100;
inline bool CreateExecutable::has_profile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateExecutable::set_has_profile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateExecutable::clear_has_profile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateExecutable::clear_profile() {
  profile_ = 0;
  clear_has_profile();
}
inline ::rhsa::CreateExecutable_Profile CreateExecutable::profile() const {
  // @@protoc_insertion_point(field_get:rhsa.CreateExecutable.profile)
  return static_cast< ::rhsa::CreateExecutable_Profile >(profile_);
}
inline void CreateExecutable::set_profile(::rhsa::CreateExecutable_Profile value) {
  assert(::rhsa::CreateExecutable_Profile_IsValid(value));
  set_has_profile();
  profile_ = value;
  // @@protoc_insertion_point(field_set:rhsa.CreateExecutable.profile)
}

// required .rhsa.CreateExecutable.ExecutableState executableState = 101;
inline bool CreateExecutable::has_executablestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateExecutable::set_has_executablestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateExecutable::clear_has_executablestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateExecutable::clear_executablestate() {
  executablestate_ = 0;
  clear_has_executablestate();
}
inline ::rhsa::CreateExecutable_ExecutableState CreateExecutable::executablestate() const {
  // @@protoc_insertion_point(field_get:rhsa.CreateExecutable.executableState)
  return static_cast< ::rhsa::CreateExecutable_ExecutableState >(executablestate_);
}
inline void CreateExecutable::set_executablestate(::rhsa::CreateExecutable_ExecutableState value) {
  assert(::rhsa::CreateExecutable_ExecutableState_IsValid(value));
  set_has_executablestate();
  executablestate_ = value;
  // @@protoc_insertion_point(field_set:rhsa.CreateExecutable.executableState)
}

// required string options = 102;
inline bool CreateExecutable::has_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateExecutable::set_has_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateExecutable::clear_has_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateExecutable::clear_options() {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_->clear();
  }
  clear_has_options();
}
inline const ::std::string& CreateExecutable::options() const {
  // @@protoc_insertion_point(field_get:rhsa.CreateExecutable.options)
  return *options_;
}
inline void CreateExecutable::set_options(const ::std::string& value) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(value);
  // @@protoc_insertion_point(field_set:rhsa.CreateExecutable.options)
}
inline void CreateExecutable::set_options(const char* value) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(value);
  // @@protoc_insertion_point(field_set_char:rhsa.CreateExecutable.options)
}
inline void CreateExecutable::set_options(const char* value, size_t size) {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  options_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rhsa.CreateExecutable.options)
}
inline ::std::string* CreateExecutable::mutable_options() {
  set_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    options_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rhsa.CreateExecutable.options)
  return options_;
}
inline ::std::string* CreateExecutable::release_options() {
  clear_has_options();
  if (options_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = options_;
    options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateExecutable::set_allocated_options(::std::string* options) {
  if (options_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete options_;
  }
  if (options) {
    set_has_options();
    options_ = options;
  } else {
    clear_has_options();
    options_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rhsa.CreateExecutable.options)
}

// -------------------------------------------------------------------

// ProgramMesg

// optional .rhsa.CreateExecutable createExecutable = 1000;
inline bool ProgramMesg::has_createexecutable() const {
  return Payload_case() == kCreateExecutable;
}
inline void ProgramMesg::set_has_createexecutable() {
  _oneof_case_[0] = kCreateExecutable;
}
inline void ProgramMesg::clear_createexecutable() {
  if (has_createexecutable()) {
    delete Payload_.createexecutable_;
    clear_has_Payload();
  }
}
inline const ::rhsa::CreateExecutable& ProgramMesg::createexecutable() const {
  return has_createexecutable() ? *Payload_.createexecutable_
                      : ::rhsa::CreateExecutable::default_instance();
}
inline ::rhsa::CreateExecutable* ProgramMesg::mutable_createexecutable() {
  if (!has_createexecutable()) {
    clear_Payload();
    set_has_createexecutable();
    Payload_.createexecutable_ = new ::rhsa::CreateExecutable;
  }
  return Payload_.createexecutable_;
}
inline ::rhsa::CreateExecutable* ProgramMesg::release_createexecutable() {
  if (has_createexecutable()) {
    clear_has_Payload();
    ::rhsa::CreateExecutable* temp = Payload_.createexecutable_;
    Payload_.createexecutable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ProgramMesg::set_allocated_createexecutable(::rhsa::CreateExecutable* createexecutable) {
  clear_Payload();
  if (createexecutable) {
    set_has_createexecutable();
    Payload_.createexecutable_ = createexecutable;
  }
}

inline bool ProgramMesg::has_Payload() {
  return Payload_case() != PAYLOAD_NOT_SET;
}
inline void ProgramMesg::clear_has_Payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ProgramMesg::PayloadCase ProgramMesg::Payload_case() const {
  return ProgramMesg::PayloadCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rhsa

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rhsa::CreateExecutable_Profile> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rhsa::CreateExecutable_Profile>() {
  return ::rhsa::CreateExecutable_Profile_descriptor();
}
template <> struct is_proto_enum< ::rhsa::CreateExecutable_ExecutableState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rhsa::CreateExecutable_ExecutableState>() {
  return ::rhsa::CreateExecutable_ExecutableState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_program_2eproto__INCLUDED
