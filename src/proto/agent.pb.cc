// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rhsa {

namespace {

const ::google::protobuf::Descriptor* Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Agent_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAgents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAgents_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_agent_2eproto() {
  protobuf_AddDesc_agent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "agent.proto");
  GOOGLE_CHECK(file != NULL);
  Agent_descriptor_ = file->message_type(0);
  static const int Agent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, vendor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, grid_max_dim_),
  };
  Agent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Agent_descriptor_,
      Agent::default_instance_,
      Agent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Agent));
  QueryAgents_descriptor_ = file->message_type(1);
  static const int QueryAgents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgents, agents_),
  };
  QueryAgents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAgents_descriptor_,
      QueryAgents::default_instance_,
      QueryAgents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAgents));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_agent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Agent_descriptor_, &Agent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAgents_descriptor_, &QueryAgents::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_agent_2eproto() {
  delete Agent::default_instance_;
  delete Agent_reflection_;
  delete QueryAgents::default_instance_;
  delete QueryAgents_reflection_;
}

void protobuf_AddDesc_agent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013agent.proto\022\004rhsa\"@\n\005Agent\022\014\n\004name\030d \002"
    "(\t\022\023\n\013vendor_name\030e \002(\t\022\024\n\014grid_max_dim\030"
    "f \002(\005\"*\n\013QueryAgents\022\033\n\006agents\030\001 \003(\0132\013.r"
    "hsa.Agent", 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agent.proto", &protobuf_RegisterTypes);
  Agent::default_instance_ = new Agent();
  QueryAgents::default_instance_ = new QueryAgents();
  Agent::default_instance_->InitAsDefaultInstance();
  QueryAgents::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_agent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_agent_2eproto {
  StaticDescriptorInitializer_agent_2eproto() {
    protobuf_AddDesc_agent_2eproto();
  }
} static_descriptor_initializer_agent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Agent::kNameFieldNumber;
const int Agent::kVendorNameFieldNumber;
const int Agent::kGridMaxDimFieldNumber;
#endif  // !_MSC_VER

Agent::Agent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rhsa.Agent)
}

void Agent::InitAsDefaultInstance() {
}

Agent::Agent(const Agent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rhsa.Agent)
}

void Agent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grid_max_dim_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:rhsa.Agent)
  SharedDtor();
}

void Agent::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (vendor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_name_;
  }
  if (this != default_instance_) {
  }
}

void Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agent_descriptor_;
}

const Agent& Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

Agent* Agent::default_instance_ = NULL;

Agent* Agent::New() const {
  return new Agent;
}

void Agent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_vendor_name()) {
      if (vendor_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendor_name_->clear();
      }
    }
    grid_max_dim_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rhsa.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 100;
      case 100: {
        if (tag == 802) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_vendor_name;
        break;
      }

      // required string vendor_name = 101;
      case 101: {
        if (tag == 810) {
         parse_vendor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendor_name().data(), this->vendor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendor_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_grid_max_dim;
        break;
      }

      // required int32 grid_max_dim = 102;
      case 102: {
        if (tag == 816) {
         parse_grid_max_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_max_dim_)));
          set_has_grid_max_dim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rhsa.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rhsa.Agent)
  return false;
#undef DO_
}

void Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rhsa.Agent)
  // required string name = 100;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->name(), output);
  }

  // required string vendor_name = 101;
  if (has_vendor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor_name().data(), this->vendor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->vendor_name(), output);
  }

  // required int32 grid_max_dim = 102;
  if (has_grid_max_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->grid_max_dim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rhsa.Agent)
}

::google::protobuf::uint8* Agent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rhsa.Agent)
  // required string name = 100;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->name(), target);
  }

  // required string vendor_name = 101;
  if (has_vendor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor_name().data(), this->vendor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        101, this->vendor_name(), target);
  }

  // required int32 grid_max_dim = 102;
  if (has_grid_max_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->grid_max_dim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rhsa.Agent)
  return target;
}

int Agent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 100;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string vendor_name = 101;
    if (has_vendor_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor_name());
    }

    // required int32 grid_max_dim = 102;
    if (has_grid_max_dim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_max_dim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Agent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Agent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Agent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vendor_name()) {
      set_vendor_name(from.vendor_name());
    }
    if (from.has_grid_max_dim()) {
      set_grid_max_dim(from.grid_max_dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Agent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Agent::Swap(Agent* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(vendor_name_, other->vendor_name_);
    std::swap(grid_max_dim_, other->grid_max_dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Agent_descriptor_;
  metadata.reflection = Agent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAgents::kAgentsFieldNumber;
#endif  // !_MSC_VER

QueryAgents::QueryAgents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rhsa.QueryAgents)
}

void QueryAgents::InitAsDefaultInstance() {
}

QueryAgents::QueryAgents(const QueryAgents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rhsa.QueryAgents)
}

void QueryAgents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAgents::~QueryAgents() {
  // @@protoc_insertion_point(destructor:rhsa.QueryAgents)
  SharedDtor();
}

void QueryAgents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAgents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAgents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAgents_descriptor_;
}

const QueryAgents& QueryAgents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

QueryAgents* QueryAgents::default_instance_ = NULL;

QueryAgents* QueryAgents::New() const {
  return new QueryAgents;
}

void QueryAgents::Clear() {
  agents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAgents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rhsa.QueryAgents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rhsa.Agent agents = 1;
      case 1: {
        if (tag == 10) {
         parse_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_agents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rhsa.QueryAgents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rhsa.QueryAgents)
  return false;
#undef DO_
}

void QueryAgents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rhsa.QueryAgents)
  // repeated .rhsa.Agent agents = 1;
  for (int i = 0; i < this->agents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rhsa.QueryAgents)
}

::google::protobuf::uint8* QueryAgents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rhsa.QueryAgents)
  // repeated .rhsa.Agent agents = 1;
  for (int i = 0; i < this->agents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rhsa.QueryAgents)
  return target;
}

int QueryAgents::ByteSize() const {
  int total_size = 0;

  // repeated .rhsa.Agent agents = 1;
  total_size += 1 * this->agents_size();
  for (int i = 0; i < this->agents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAgents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAgents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAgents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAgents::MergeFrom(const QueryAgents& from) {
  GOOGLE_CHECK_NE(&from, this);
  agents_.MergeFrom(from.agents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAgents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAgents::CopyFrom(const QueryAgents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAgents::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->agents())) return false;
  return true;
}

void QueryAgents::Swap(QueryAgents* other) {
  if (other != this) {
    agents_.Swap(&other->agents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAgents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAgents_descriptor_;
  metadata.reflection = QueryAgents_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rhsa

// @@protoc_insertion_point(global_scope)
