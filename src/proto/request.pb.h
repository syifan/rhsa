// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_request_2eproto__INCLUDED
#define PROTOBUF_request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "init.pb.h"
#include "agent.pb.h"
#include "program.pb.h"
// @@protoc_insertion_point(includes)

namespace rhsa {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_request_2eproto();
void protobuf_AssignDesc_request_2eproto();
void protobuf_ShutdownFile_request_2eproto();

class RequestMessage;

// ===================================================================

class RequestMessage : public ::google::protobuf::Message {
 public:
  RequestMessage();
  virtual ~RequestMessage();

  RequestMessage(const RequestMessage& from);

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestMessage& default_instance();

  enum PayloadCase {
    kInit = 1000,
    kQueryAgent = 2000,
    kProgramMesg = 3000,
    PAYLOAD_NOT_SET = 0,
  };

  void Swap(RequestMessage* other);

  // implements Message ----------------------------------------------

  RequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rhsa.InitMessage init = 1000;
  inline bool has_init() const;
  inline void clear_init();
  static const int kInitFieldNumber = 1000;
  inline const ::rhsa::InitMessage& init() const;
  inline ::rhsa::InitMessage* mutable_init();
  inline ::rhsa::InitMessage* release_init();
  inline void set_allocated_init(::rhsa::InitMessage* init);

  // optional .rhsa.QueryAgent queryAgent = 2000;
  inline bool has_queryagent() const;
  inline void clear_queryagent();
  static const int kQueryAgentFieldNumber = 2000;
  inline const ::rhsa::QueryAgent& queryagent() const;
  inline ::rhsa::QueryAgent* mutable_queryagent();
  inline ::rhsa::QueryAgent* release_queryagent();
  inline void set_allocated_queryagent(::rhsa::QueryAgent* queryagent);

  // optional .rhsa.ProgramMesg programMesg = 3000;
  inline bool has_programmesg() const;
  inline void clear_programmesg();
  static const int kProgramMesgFieldNumber = 3000;
  inline const ::rhsa::ProgramMesg& programmesg() const;
  inline ::rhsa::ProgramMesg* mutable_programmesg();
  inline ::rhsa::ProgramMesg* release_programmesg();
  inline void set_allocated_programmesg(::rhsa::ProgramMesg* programmesg);

  inline PayloadCase Payload_case() const;
  // @@protoc_insertion_point(class_scope:rhsa.RequestMessage)
 private:
  inline void set_has_init();
  inline void set_has_queryagent();
  inline void set_has_programmesg();

  inline bool has_Payload();
  void clear_Payload();
  inline void clear_has_Payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union PayloadUnion {
    ::rhsa::InitMessage* init_;
    ::rhsa::QueryAgent* queryagent_;
    ::rhsa::ProgramMesg* programmesg_;
  } Payload_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static RequestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestMessage

// optional .rhsa.InitMessage init = 1000;
inline bool RequestMessage::has_init() const {
  return Payload_case() == kInit;
}
inline void RequestMessage::set_has_init() {
  _oneof_case_[0] = kInit;
}
inline void RequestMessage::clear_init() {
  if (has_init()) {
    delete Payload_.init_;
    clear_has_Payload();
  }
}
inline const ::rhsa::InitMessage& RequestMessage::init() const {
  return has_init() ? *Payload_.init_
                      : ::rhsa::InitMessage::default_instance();
}
inline ::rhsa::InitMessage* RequestMessage::mutable_init() {
  if (!has_init()) {
    clear_Payload();
    set_has_init();
    Payload_.init_ = new ::rhsa::InitMessage;
  }
  return Payload_.init_;
}
inline ::rhsa::InitMessage* RequestMessage::release_init() {
  if (has_init()) {
    clear_has_Payload();
    ::rhsa::InitMessage* temp = Payload_.init_;
    Payload_.init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestMessage::set_allocated_init(::rhsa::InitMessage* init) {
  clear_Payload();
  if (init) {
    set_has_init();
    Payload_.init_ = init;
  }
}

// optional .rhsa.QueryAgent queryAgent = 2000;
inline bool RequestMessage::has_queryagent() const {
  return Payload_case() == kQueryAgent;
}
inline void RequestMessage::set_has_queryagent() {
  _oneof_case_[0] = kQueryAgent;
}
inline void RequestMessage::clear_queryagent() {
  if (has_queryagent()) {
    delete Payload_.queryagent_;
    clear_has_Payload();
  }
}
inline const ::rhsa::QueryAgent& RequestMessage::queryagent() const {
  return has_queryagent() ? *Payload_.queryagent_
                      : ::rhsa::QueryAgent::default_instance();
}
inline ::rhsa::QueryAgent* RequestMessage::mutable_queryagent() {
  if (!has_queryagent()) {
    clear_Payload();
    set_has_queryagent();
    Payload_.queryagent_ = new ::rhsa::QueryAgent;
  }
  return Payload_.queryagent_;
}
inline ::rhsa::QueryAgent* RequestMessage::release_queryagent() {
  if (has_queryagent()) {
    clear_has_Payload();
    ::rhsa::QueryAgent* temp = Payload_.queryagent_;
    Payload_.queryagent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestMessage::set_allocated_queryagent(::rhsa::QueryAgent* queryagent) {
  clear_Payload();
  if (queryagent) {
    set_has_queryagent();
    Payload_.queryagent_ = queryagent;
  }
}

// optional .rhsa.ProgramMesg programMesg = 3000;
inline bool RequestMessage::has_programmesg() const {
  return Payload_case() == kProgramMesg;
}
inline void RequestMessage::set_has_programmesg() {
  _oneof_case_[0] = kProgramMesg;
}
inline void RequestMessage::clear_programmesg() {
  if (has_programmesg()) {
    delete Payload_.programmesg_;
    clear_has_Payload();
  }
}
inline const ::rhsa::ProgramMesg& RequestMessage::programmesg() const {
  return has_programmesg() ? *Payload_.programmesg_
                      : ::rhsa::ProgramMesg::default_instance();
}
inline ::rhsa::ProgramMesg* RequestMessage::mutable_programmesg() {
  if (!has_programmesg()) {
    clear_Payload();
    set_has_programmesg();
    Payload_.programmesg_ = new ::rhsa::ProgramMesg;
  }
  return Payload_.programmesg_;
}
inline ::rhsa::ProgramMesg* RequestMessage::release_programmesg() {
  if (has_programmesg()) {
    clear_has_Payload();
    ::rhsa::ProgramMesg* temp = Payload_.programmesg_;
    Payload_.programmesg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestMessage::set_allocated_programmesg(::rhsa::ProgramMesg* programmesg) {
  clear_Payload();
  if (programmesg) {
    set_has_programmesg();
    Payload_.programmesg_ = programmesg;
  }
}

inline bool RequestMessage::has_Payload() {
  return Payload_case() != PAYLOAD_NOT_SET;
}
inline void RequestMessage::clear_has_Payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline RequestMessage::PayloadCase RequestMessage::Payload_case() const {
  return RequestMessage::PayloadCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rhsa

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_request_2eproto__INCLUDED
